(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{104:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return i})),n.d(a,"metadata",(function(){return o})),n.d(a,"toc",(function(){return s})),n.d(a,"default",(function(){return c}));var t=n(3),r=n(7),l=(n(0),n(133)),i={id:"graphql",title:"GraphQL",sidebar_label:"GraphQL"},o={unversionedId:"tutoriales/graphql",id:"tutoriales/graphql",isDocsHomePage:!1,title:"GraphQL",description:"GraphQL es un lenguaje de consulta para su API y un tiempo de ejecuci\xf3n del lado del servidor para ejecutar consultas mediante el uso de un sistema de tipos que defina para sus datos. GraphQL no est\xe1 vinculado a ninguna base de datos o motor de almacenamiento espec\xedfico y, en cambio, est\xe1 respaldado por su c\xf3digo y datos existentes.",source:"@site/docs/tutoriales/graphql.md",slug:"/tutoriales/graphql",permalink:"/docs/tutoriales/graphql",editUrl:"https://github.com/eoscostarica/guias.eoscostarica.io/tree/master/docs/tutoriales/graphql.md",version:"current",lastUpdatedBy:"Edgar Parra",lastUpdatedAt:1612976573,sidebar_label:"GraphQL",sidebar:"docs",previous:{title:"React JS",permalink:"/docs/tutoriales/tutorial-react"},next:{title:"Docker",permalink:"/docs/tutoriales/docker"}},s=[{value:"Consultas y Mutaciones",id:"consultas-y-mutaciones",children:[{value:"Campos",id:"campos",children:[]},{value:"Argumentos",id:"argumentos",children:[]},{value:"Alias",id:"alias",children:[]},{value:"Fragmentos",id:"fragmentos",children:[]},{value:"Nombre de la Operaci\xf3n",id:"nombre-de-la-operaci\xf3n",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Directivas",id:"directivas",children:[]},{value:"Mutaciones",id:"mutaciones",children:[]},{value:"Fragmentos en L\xednea",id:"fragmentos-en-l\xednea",children:[]}]},{value:"Esquema y Tipos",id:"esquema-y-tipos",children:[{value:"Type System",id:"type-system",children:[]},{value:"Tipo de Idioma",id:"tipo-de-idioma",children:[]},{value:"Campos y Tipos de Objetos",id:"campos-y-tipos-de-objetos",children:[]},{value:"Argumentos",id:"argumentos-1",children:[]},{value:"Los Tipos de Consulta y Mutaci\xf3n",id:"los-tipos-de-consulta-y-mutaci\xf3n",children:[]},{value:"Tipos Escalares",id:"tipos-escalares",children:[]},{value:"Tipos de Enumeraci\xf3n",id:"tipos-de-enumeraci\xf3n",children:[]},{value:"Listas y Non-Null",id:"listas-y-non-null",children:[]},{value:"Interfaces",id:"interfaces",children:[]},{value:"Tipos de Uni\xf3n",id:"tipos-de-uni\xf3n",children:[]},{value:"Tipos de Entrada",id:"tipos-de-entrada",children:[]}]},{value:"Ejecuci\xf3n",id:"ejecuci\xf3n",children:[]},{value:"Ayuda de Idioma",id:"ayuda-de-idioma",children:[{value:"Top 5",id:"top-5",children:[]},{value:"JavaScript",id:"javascript",children:[]}]}],p={toc:s};function c(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(t.a)({},p,n,{components:a,mdxType:"MDXLayout"}),Object(l.b)("p",null,Object(l.b)("a",{parentName:"p",href:"https://graphql.org/"},"GraphQL")," es un lenguaje de consulta para su API y un tiempo de ejecuci\xf3n del lado del servidor para ejecutar consultas mediante el uso de un sistema de tipos que defina para sus datos. GraphQL no est\xe1 vinculado a ninguna base de datos o motor de almacenamiento espec\xedfico y, en cambio, est\xe1 respaldado por su c\xf3digo y datos existentes."),Object(l.b)("h2",{id:"consultas-y-mutaciones"},"Consultas y Mutaciones"),Object(l.b)("h3",{id:"campos"},"Campos"),Object(l.b)("p",null,"En su forma m\xe1s simple, GraphQL se trata de solicitar campos espec\xedficos en objetos."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"{\n  lifebank {\n    name\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "lifebank": {\n        "name": "National Blood Bank"\n    }\n  }\n}\n')),Object(l.b)("p",null,"Esto es esencial para GraphQL, porque siempre obtiene lo que espera y el servidor sabe exactamente qu\xe9 campos solicita el cliente."),Object(l.b)("h3",{id:"argumentos"},"Argumentos"),Object(l.b)("p",null,"Cada campo y objeto anidado puede obtener su propio conjunto de argumentos, lo que convierte a GraphQL en un reemplazo completo para realizar m\xfaltiples b\xfasquedas de API. Incluso puede pasar argumentos a campos escalares para implementar transformaciones de datos una vez en el servidor, en lugar de en cada cliente por separado."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},'{\n  lifebank(email: "blood@gmail.com") {\n    telephone\n    location    \n  }\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "lifebank": {\n        "name": "National Blood Bank"\n        "location": "Costa Rica",\n    }\n  }\n}\n')),Object(l.b)("p",null,"GraphQL viene con un conjunto predeterminado de tipos, pero un servidor GraphQL tambi\xe9n puede declarar sus propios tipos personalizados, siempre que se puedan serializar en su formato de transporte."),Object(l.b)("h3",{id:"alias"},"Alias"),Object(l.b)("p",null,"Los alias le permiten cambiar el nombre del resultado de un campo a lo que desee."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},'{\n  mainLifebank: lifebank(email: "blood@gmail.com") {\n    name\n  }\n  secondaryLifebank: lifebank(email: "secondaryblood@gmail.com") {\n    name\n  }\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "mainLifebank": {\n        "name": "National Blood Bank"\n    },\n    "secondaryLifebank": {\n        "name": "National Rescue Blood Bank"\n    }\n  }\n}\n')),Object(l.b)("h3",{id:"fragmentos"},"Fragmentos"),Object(l.b)("p",null,"GraphQL incluye unidades reutilizables llamadas fragmentos. Los fragmentos le permiten construir conjuntos de campos y luego incluirlos en consultas cuando lo necesite."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},'{\n  leftComparison: lifebank(email: "blood@gmail.com") {\n    ...comparisonFields\n  }\n  rightComparison: lifebank(email: "secondaryblood@gmail.com") {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  location \n  telephone\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "leftComparison": {\n        "name": "National Blood Bank",\n        "location": "Costa Rica",\n        "urgencyLevel": "high" \n    },\n    "rightComparison": {\n        "name": "National Rescue Blood Bank",\n        "location": "Costa Rica",\n        "urgencyLevel": "medium" \n    }\n  }\n}\n')),Object(l.b)("p",null,"El concepto de fragmentos se utiliza con frecuencia para dividir los requisitos de datos de aplicaciones complicados en partes m\xe1s peque\xf1as."),Object(l.b)("h3",{id:"nombre-de-la-operaci\xf3n"},"Nombre de la Operaci\xf3n"),Object(l.b)("p",null,"El nombre de la operaci\xf3n es un nombre significativo y expl\xedcito para su operaci\xf3n. Solo se requiere en documentos de operaciones m\xfaltiples, pero se recomienda su uso porque es muy \xfatil para la depuraci\xf3n y el registro del lado del servidor."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"query LifebankNameAndPhotos {\n  lifebank{\n    name\n    photos {\n        url\n    }\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "lifebank": {\n        "name": "National Blood Bank",\n        "photos": [\n            {\n                "url": "photo1.png"\n            },\n            {\n                "url": "photo2.png"\n            },\n            {\n                "url": "photo3.png"\n            }\n        ]\n    }\n  }\n}\n')),Object(l.b)("p",null,"Cuando algo sale mal, es m\xe1s f\xe1cil identificar una consulta en su c\xf3digo base por su nombre en lugar de intentar descifrar el contenido."),Object(l.b)("h3",{id:"variables"},"Variables"),Object(l.b)("p",null,"GraphQL tiene una forma de primera clase de factorizar valores din\xe1micos fuera de la consulta y pasarlos como un diccionario separado. Estos valores se denominan variables."),Object(l.b)("p",null,"Cuando comenzamos a trabajar con variables, debemos hacer tres cosas:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Reemplaza el valor est\xe1tico en la consulta con ",Object(l.b)("inlineCode",{parentName:"li"},"$variableName"),"."),Object(l.b)("li",{parentName:"ul"},"Declare ",Object(l.b)("inlineCode",{parentName:"li"},"$variableName")," como una de las variables aceptadas por la consulta."),Object(l.b)("li",{parentName:"ul"},"Pase variableName: valor en el diccionario de variables independiente, espec\xedfico del transporte (generalmente JSON).")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Variables"',title:'"Variables"'},'{\n  "email": "blood@gmail.com"\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"query LifebankNameAndPhotos($email: Lifebank) {\n  lifebank(email: $email) {\n    name\n    photos {\n        url\n    }\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "lifebank": {\n        "name": "National Blood Bank",\n        "photos": [\n            {\n                "url": "photo1.png"\n            },\n            {\n                "url": "photo2.png"\n            },\n            {\n                "url": "photo3.png"\n            }\n        ]\n    }\n  }\n}\n')),Object(l.b)("h3",{id:"directivas"},"Directivas"),Object(l.b)("p",null,"Se puede adjuntar una directiva a la inclusi\xf3n de un campo o fragmento, y puede afectar la ejecuci\xf3n de la consulta de la forma que desee el servidor. La especificaci\xf3n principal de GraphQL incluye exactamente dos directivas, que deben ser compatibles con cualquier implementaci\xf3n de servidor GraphQL que cumpla con las especificaciones:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@include"),"(if: Boolean) Solo incluya este campo en el resultado si el argumento es verdadero."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@skip"),"(if: Boolean) Omita este campo si el argumento es verdadero.")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Variables"',title:'"Variables"'},'{\n    "email": "blood@gmail.com",\n    "withPhotos": false\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"query Lifebank($email: Lifebank, $withPhotos: Boolean!) {\n  lifebank(name: $email) {\n    name\n    photos @include(if: $withPhotos) {\n        url\n    }\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "lifebank": {\n    "name": "National Blood Bank" \n   }\n}\n')),Object(l.b)("h3",{id:"mutaciones"},"Mutaciones"),Object(l.b)("p",null,"Se podr\xeda implementar cualquier consulta para provocar una escritura de datos. Sin embargo, es \xfatil establecer una convenci\xf3n de que cualquier operaci\xf3n que provoque escrituras debe enviarse expl\xedcitamente a trav\xe9s de una mutaci\xf3n."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Variables"',title:'"Variables"'},'{\n  "email": "blood@gmail.com",\n  "urgencyLevel": "high"\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"mutation ChangeUrgencyLevel($ep: Episode!, $review: ReviewInput!) {\n  updateUrgencyLevel(email: $email, urgencyLevel: $urgencyLevel) {\n    urgencyLevel\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "updateUrgencyLevel": {\n    "urgencyLevel": "high",\n    }\n  }\n}\n')),Object(l.b)("p",null,"Al igual que en las consultas, si el campo de mutaci\xf3n devuelve un tipo de objeto, puede solicitar campos anidados. Esto puede resultar \xfatil para obtener el nuevo estado de un objeto despu\xe9s de una actualizaci\xf3n."),Object(l.b)("h3",{id:"fragmentos-en-l\xednea"},"Fragmentos en L\xednea"),Object(l.b)("p",null,"Si est\xe1 consultando un campo que devuelve una interfaz o un tipo de uni\xf3n, necesitar\xe1 usar fragmentos en l\xednea para acceder a los datos del tipo concreto subyacente."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Variables"',title:'"Variables"'},'{\n  "ep": "JEDI"\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"query HeroForEpisode($ep: Episode!) {\n  hero(episode: $ep) {\n    name\n    ... on Droid {\n    primaryFunction\n    }\n    ... on Human {\n    height\n    }\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "hero": {\n    "name": "R2-D2",\n    "primaryFunction": "Astromech"\n    }\n  }\n}\n')),Object(l.b)("h2",{id:"esquema-y-tipos"},"Esquema y Tipos"),Object(l.b)("h3",{id:"type-system"},"Type System"),Object(l.b)("p",null,"Cada servicio GraphQL define un conjunto de tipos que describen completamente el conjunto de datos posibles que puede consultar en ese servicio. Luego, cuando llegan las consultas, se validan y ejecutan contra ese esquema."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"{\n  lifebank {\n    name\n    email\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "lifebank ": {\n    "name": "National Blood Bank",\n    "email": "blood@gmail.com"\n    }\n  }\n}\n')),Object(l.b)("h3",{id:"tipo-de-idioma"},"Tipo de Idioma"),Object(l.b)("p",null,'Los servicios GraphQL se pueden escribir en cualquier idioma. El "lenguaje de esquema GraphQL" - es similar al lenguaje de consulta y nos permite hablar sobre los esquemas GraphQL de una manera independiente del lenguaje.'),Object(l.b)("h3",{id:"campos-y-tipos-de-objetos"},"Campos y Tipos de Objetos"),Object(l.b)("p",null,"Los componentes m\xe1s b\xe1sicos de un esquema GraphQL son los tipos de objetos. En el lenguaje de esquema GraphQL, podr\xedamos representarlo as\xed:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"type Character {\n name: String!\n appearsIn: [Episode!]!\n}\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"Character")," es un tipo de objeto GraphQL, lo que significa que es un tipo con algunos campos. La mayor\xeda de los tipos de su esquema ser\xe1n tipos de objetos.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"name")," y ",Object(l.b)("inlineCode",{parentName:"p"},"appearsIn")," son campos del tipo Character. Eso significa que el name y appearsIn son los \xfanicos campos que pueden aparecer en cualquier parte de una consulta GraphQL que opera en el tipo \u2018Character\u2019.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"String")," es uno de los tipos escalares integrados - estos son tipos que se resuelven en un solo objeto escalar y no pueden tener sub-selecciones en la consulta.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"[Episode!]!")," representa una matriz de objetos Episodio. Dado que tampoco admite valores NULL, siempre puede esperar una matriz (con cero o m\xe1s elementos) cuando consulta el campo \u2018appearsIn\u2019. "))),Object(l.b)("h3",{id:"argumentos-1"},"Argumentos"),Object(l.b)("p",null,"Cada campo de un tipo de objeto GraphQL puede tener cero o m\xe1s argumentos. Todos los argumentos en GraphQL se pasan por nombre espec\xedficamente, pueden ser obligatorios u opcionales. Cuando un argumento es opcional, podemos definir un valor predeterminado; si no se pasa el argumento de la unidad, se establecer\xe1 en METER de manera predeterminada."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"type Starship {\n id: ID!\n name: String!\n length(unit: LengthUnit = METER): Float\n}\n")),Object(l.b)("h3",{id:"los-tipos-de-consulta-y-mutaci\xf3n"},"Los Tipos de Consulta y Mutaci\xf3n"),Object(l.b)("p",null,"Cada servicio GraphQL tiene un tipo de consulta y puede tener o no un tipo de mutaci\xf3n. Estos tipos son los mismos que un tipo de objeto normal, pero son especiales porque definen el punto de entrada de cada consulta GraphQL."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Schema"',title:'"Schema"'},"schema {\n query: Query\n mutation: Mutation\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},'query {\n  hero {\n    name\n  }\n  droid(id: "2000") {\n    name\n  }\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "hero": {\n        "name": "R2-D2"\n    },\n    "droid": {\n        "name": "C-3PO"\n    }\n  }\n}\n')),Object(l.b)("p",null,"Las mutaciones funcionan de manera similar: usted define campos en el tipo de mutaci\xf3n, y esos est\xe1n disponibles como los campos de mutaci\xf3n ra\xedz que puede llamar en su consulta."),Object(l.b)("h3",{id:"tipos-escalares"},"Tipos Escalares"),Object(l.b)("p",null,"Los tipos escalares representan las hojas de la consulta. Sabemos esto porque esos campos no tienen subcampos, son las hojas de la consulta."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"{\n  hero {\n    name\n    appearsIn\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "hero": {\n       "name": "R2-D2",\n       "appearsIn": [\n           "NEWHOPE",\n           "EMPIRE",\n           "JEDI"\n        ]\n    }\n  }\n}\n')),Object(l.b)("p",null,"GraphQL viene con un conjunto de tipos escalares predeterminados listos para usar:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Int"),": Un entero de 32 bits con signo."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Float"),": Un valor de coma flotante de precisi\xf3n doble con signo."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"String"),": Una secuencia de caracteres UTF-8."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Boolean"),": Verdadero o falso."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ID"),": El tipo escalar de ID representa un identificador \xfanico El tipo de ID se serializa de la misma forma que una cadena.")),Object(l.b)("h3",{id:"tipos-de-enumeraci\xf3n"},"Tipos de Enumeraci\xf3n"),Object(l.b)("p",null,"Tambi\xe9n llamados Enums, los tipos de enumeraci\xf3n son un tipo especial de escalar que est\xe1 restringido a un conjunto particular de valores permitidos. Esto permite:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Valide que cualquier argumento de este tipo sea uno de los valores permitidos."),Object(l.b)("li",{parentName:"ul"},"Comunicar a trav\xe9s del sistema de tipos que un campo siempre ser\xe1 uno de un conjunto finito de valores.")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Enum"',title:'"Enum"'},"enum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n")),Object(l.b)("h3",{id:"listas-y-non-null"},"Listas y Non-Null"),Object(l.b)("p",null,"El modificador de tipo Non-Null se utiliza al definir argumentos para un campo, lo que har\xe1 que el servidor GraphQL devuelva un error de validaci\xf3n si se pasa un valor nulo como ese argumento, ya sea en la cadena GraphQL o en las variables."),Object(l.b)("p",null,"Las listas funcionan de manera similar, podemos usar un modificador de tipo para marcar un tipo como una Lista, lo que indica que este campo devolver\xe1 una matriz de ese tipo."),Object(l.b)("p",null,"Los modificadores Non-Null y Lista se pueden combinar. "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Type"',title:'"Type"'},"type Character {\n  name: String!\n  appearsIn: [Episode]!\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Variables"',title:'"Variables"'},'{\n  "id": null\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"query DroidById($id: ID!) {\n  droid(id: $id) {\n    name\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "errors": [\n    {\n       "message": "Variable \\"$id\\" of non-null type \\"ID!\\" must not be null.",\n       "locations": [\n        {\n          "line": 1,\n          "column": 17\n        }\n    ]\n    }\n  ]\n}\n')),Object(l.b)("h3",{id:"interfaces"},"Interfaces"),Object(l.b)("p",null,"Una interfaz es un tipo abstracto que incluye un determinado conjunto de campos que un tipo debe incluir para implementar la interfaz."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Interface"',title:'"Interface"'},"interface Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Example 1"',title:'"Example','1"':!0},"type Human implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n  starships: [Starship]\n  totalCredits: Int\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Example 2"',title:'"Example','2"':!0},"type Droid implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n  primaryFunction: String\n}\n")),Object(l.b)("p",null,"Las interfaces son \xfatiles cuando desea devolver un objeto o un conjunto de objetos."),Object(l.b)("h3",{id:"tipos-de-uni\xf3n"},"Tipos de Uni\xf3n"),Object(l.b)("p",null,"Los tipos de uni\xf3n son muy similares a las interfaces, pero no pueden especificar ning\xfan campo com\xfan entre los tipos."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Union"',title:'"Union"'},"union SearchResult = Human | Droid | Starship\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},'{\n  search(text: "an") {\n    __typename\n    ... on Human {\n        name\n        height\n    }\n\n    ... on Droid {\n        name\n        primaryFunction\n    }\n\n    ... on Starship {\n        name\n        length\n    }\n  }\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "search": [\n    {\n        "__typename": "Human",\n        "name": "Han Solo",\n        "height": 1.8\n    },\n    {\n        "__typename": "Human",\n        "name": "Leia Organa",\n        "height": 1.5\n    },\n    {\n        "__typename": "Starship",\n        "name": "TIE Advanced x1",\n        "length": 9.2\n    }\n    ]\n  }\n}\n')),Object(l.b)("h3",{id:"tipos-de-entrada"},"Tipos de Entrada"),Object(l.b)("p",null,"En el lenguaje de esquema GraphQL, los tipos de entrada tienen exactamente el mismo aspecto que los tipos de objetos normales, pero con la entrada de palabras clave en lugar de type."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input Type"',title:'"Input','Type"':!0},"input ReviewInput {\n stars: Int!\n commentary: String\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Variables"',title:'"Variables"'},'{\n  "ep": "JEDI",\n  "review": {\n    "stars": 5,\n    "commentary": "This is a great movie!"\n  }\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {\n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "createReview": {\n    "stars": 5,\n    "commentary": "This is a great movie!"\n    }\n  }\n}\n')),Object(l.b)("p",null,"Los campos de un tipo de objeto de entrada pueden hacer referencia a tipos de objetos de entrada, pero no puede mezclar tipos de entrada y salida en su esquema. Los tipos de objetos de entrada tampoco pueden tener argumentos en sus campos."),Object(l.b)("h2",{id:"ejecuci\xf3n"},"Ejecuci\xf3n"),Object(l.b)("p",null,"Despu\xe9s de ser validada, un servidor GraphQL ejecuta una consulta GraphQL que devuelve un resultado que refleja la forma de la consulta solicitada, normalmente como JSON."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Type System"',title:'"Type','System"':!0},"type Query {\n    human(id: ID!): Human\n}\n\ntype Human {\n    name: String\n    appearsIn: [Episode]\n    starships: [Starship]\n}\n\nenum Episode {\n    NEWHOPE\n    EMPIRE\n    JEDI\n}\n\ntype Starship {\n    name: String\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Input"',title:'"Input"'},"{\n  human(id: 1002) {\n    name\n    appearsIn\n    starships {\n        name\n    }\n  }\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Output"',title:'"Output"'},'{\n  "data": {\n    "human": {\n        "name": "Han Solo",\n        "appearsIn": [\n            "NEWHOPE",\n            "EMPIRE",\n            "JEDI"\n        ],\n        "starships": [\n        {\n            "name": "Millenium Falcon"\n        },\n        {\n            "name": "Imperial shuttle"\n        }\n        ]\n    }\n  }\n}\n')),Object(l.b)("p",null,"Cada campo de cada tipo est\xe1 respaldado por una funci\xf3n llamada resolver que es proporcionada por el desarrollador del servidor GraphQL. Cuando se ejecuta un campo, se llama al resolutor correspondiente para producir el siguiente valor."),Object(l.b)("h2",{id:"ayuda-de-idioma"},"Ayuda de Idioma"),Object(l.b)("h3",{id:"top-5"},"Top 5"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",{parentName:"li",href:"https://www.javascript.com"},"JavaScript")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",{parentName:"li",href:"https://golang.org"},"Go")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",{parentName:"li",href:"https://www.php.net"},"PHP")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",{parentName:"li",href:"https://www.python.org"},"Python")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",{parentName:"li",href:"https://www.java.com/en/"},"Java"))),Object(l.b)("h3",{id:"javascript"},"JavaScript"),Object(l.b)("h4",{id:"servidor"},"Servidor"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"GraphQL.js:")," La implementaci\xf3n de referencia de la especificaci\xf3n GraphQL, dise\xf1ada para ejecutar GraphQL en un entorno Node.js."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Apollo Server:")," Un conjunto de paquetes de servidor GraphQL de Apollo que funcionan con varios marcos HTTP de Node.js (Express, Connect, Hapi, Koa, etc).")),Object(l.b)("h4",{id:"cliente"},"Cliente"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Apollo Client:")," Un potente cliente JavaScript GraphQL, dise\xf1ado para funcionar bien con React, React Native, Angular 2 o simplemente JavaScript."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"GraphQL Request:")," Un cliente GraphQL de JavaScript simple y flexible que funciona en todos los entornos de JavaScript (el navegador, Node.js y React Native), b\xe1sicamente un contenedor ligero alrededor de fetch.")),Object(l.b)("h4",{id:"herramientas"},"Herramientas"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"GraphiQL:")," Un IDE de GraphQL interactivo en el navegador."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"GraphQL CLI:")," Una herramienta de l\xednea de comandos para flujos de trabajo de desarrollo GraphQL comunes.")),Object(l.b)("h4",{id:"servicios"},"Servicios"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"https://guide.eoscostarica.io/docs/developer-tools#apollo"},Object(l.b)("strong",{parentName:"a"},"Apollo:"))," Un servicio en la nube para monitorear el rendimiento y el uso de su backend GraphQL."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"https://guide.eoscostarica.io/docs/developer-tools#hasura"},Object(l.b)("strong",{parentName:"a"},"Hasura:"))," Hasura se conecta a sus bases de datos y microservicios y le brinda instant\xe1neamente una API GraphQL lista para producci\xf3n."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"https://guide.eoscostarica.io/docs/developer-tools#postman"},Object(l.b)("strong",{parentName:"a"},"Postman:"))," Un cliente HTTP que admite la edici\xf3n de consultas GraphQL.")))}c.isMDXComponent=!0},133:function(e,a,n){"use strict";n.d(a,"a",(function(){return u})),n.d(a,"b",(function(){return b}));var t=n(0),r=n.n(t);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),c=function(e){var a=r.a.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},u=function(e){var a=c(e.components);return r.a.createElement(p.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},m=r.a.forwardRef((function(e,a){var n=e.components,t=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=t,b=u["".concat(i,".").concat(m)]||u[m]||d[m]||l;return n?r.a.createElement(b,o(o({ref:a},p),{},{components:n})):r.a.createElement(b,o({ref:a},p))}));function b(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:t,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);